import React, { useState, useRef } from "react";
import { useForm, Controller } from "react-hook-form";
import Layout from "../components/common/Layout";
import Header from "../components/common/Header";
import styles from "../styles/pages/writeReview.module.scss";
import BlueBtn from "../components/common/BlueBtn";
import FormErrorMessage from "../components/common/FormErrorMessage";
import { ReactComponent as RadioTrue } from "../assets/icons/radioTrue.svg";
import { ReactComponent as RadioFalse } from "../assets/icons/radioFalse.svg";
import { ReactComponent as CheckboxTrue } from "../assets/icons/checkboxTrue.svg";
import { ReactComponent as CheckboxFalse } from "../assets/icons/checkboxFalse.svg";
import { ReactComponent as StarCustom } from "../assets/icons/starCustom.svg";

const WriteReview = () => {
    const {register, handleSubmit, watch, formState: {errors}, control } = useForm();
    const rateInput = useRef();

    const [type, setType] = useState(null);
    const [password, setPassword] = useState(null);
    const [toilet, setToilet] = useState([]);
    const [tissue, setTissue] = useState(null);
    const [disabled, setDisabled] = useState(null);
    const [isActive, setIsActive] = useState(false);
    const [rate, setRate] = useState("");
    const [starStatus, setStarStatus] = useState([]);

    const handleCheckbox = (e) => {
        if (toilet.find((v) => v === e.target.id)) {
            setToilet(toilet.filter((v) => v !== e.target.id));
        }
        else {
            setToilet([...toilet, e.target.id]);
        }
    }

    const onSubmit = () => {
        
    }

    console.log(watch("rate"));

    return (
        <Layout>
            <Header type="hamburger" text="Î¶¨Î∑∞ Ï∂îÍ∞Ä" />
            <form className={styles.wrapper} onSubmit={handleSubmit(onSubmit)}>
                <section className={styles.location}>
                    <p className={styles.title}>ÌôîÏû•Ïã§ ÏúÑÏπò</p>
                    <article>
                        <p className={styles.subtitle}>Ï£ºÏÜå</p>
                        <p className={styles.content}>ÏÑúÏö∏Ïãú Ïñ¥Ï©åÍµ¨ 2-16</p>
                    </article>
                    <article>
                        <p className={styles.subtitle}>Ï†ïÌôïÌïú ÏúÑÏπò</p>
                        <p className={styles.content}>Î´ÑÎ´ÑÎπåÎî© 2Ï∏µ Î≥µÎèÑ ÎÅù</p>
                    </article>
                </section>
                
                <section className={styles.options}>
                    <p className={styles.title}>ÏòµÏÖò Ï†ïÎ≥¥</p>

                    <p className={styles.subtitle}>Ï¢ÖÎ•ò</p>
                    <Controller name="type" control={control} rules={{required: true}} render={({field: { onChange, value }}) => (
                        <article value={value} onChange={onChange}>
                            <input type="radio" name="type" id="separated" value="separated" onChange={(e) => setType(e.target.value)}/>
                            <label htmlFor="separated">
                                {type === "separated" ? <RadioTrue /> : <RadioFalse />}
                                ÎÇ®ÎÖÄ Î∂ÑÎ¶¨
                            </label>
                            <input type="radio" name="type" id="unseparated" value="unseparated" onChange={(e) => setType(e.target.value)} />
                            <label htmlFor="unseparated">
                                {type === "unseparated" ? <RadioTrue /> : <RadioFalse />}
                                ÎÇ®ÎÖÄ Í≥µÏö©
                            </label>
                        </article>
                    )} />
                    {errors.type && <FormErrorMessage message="üö® ÎÇ®ÎÖÄÎ∂ÑÎ¶¨ Ïó¨Î∂ÄÎ•º ÏÑ†ÌÉùÌï¥Ï£ºÏÑ∏Ïöî" />}

                    <p className={styles.subtitle}>ÎπÑÎ∞ÄÎ≤àÌò∏</p>
                    <Controller name="password" control={control} rules={{required: true}} render={({field: { onChange, value }}) => (
                        <article value={value} onChange={onChange}>
                            <input type="radio" name="password" id="locked" value="locked" onChange={(e) => setPassword(e.target.id)} />
                            <label htmlFor="locked">
                                {password === "locked" ? <RadioTrue /> : <RadioFalse />}
                                ÏûàÏùå
                            </label>
                            <input type="radio" name="password" id="unlocked" value="unlocked" onChange={(e) => setPassword(e.target.id)} />
                            <label htmlFor="unlocked">
                                {password === "unlocked" ? <RadioTrue /> : <RadioFalse />}
                                ÏóÜÏùå
                            </label>
                        </article>
                    )} />           
                    {errors.password && <FormErrorMessage message="üö® ÎπÑÎ∞ÄÎ≤àÌò∏ Ïó¨Î∂ÄÎ•º ÏÑ†ÌÉùÌï¥Ï£ºÏÑ∏Ïöî" />}

                    <p className={styles.subtitle}>Î≥ÄÍ∏∞ Ï¢ÖÎ•ò (Ï§ëÎ≥µ ÏÑ†ÌÉù Í∞ÄÎä•)</p>
                    <article>
                        <Controller name="seat" control={control} rules={{required: true}} render={({field: { onChange, value }}) => (
                            <div value={value} onChange={onChange}>
                                <input type="checkbox" id="seat" onChange={handleCheckbox} />
                                <label htmlFor="seat">
                                    {toilet.find((v) => v === "seat") ? <CheckboxTrue /> : <CheckboxFalse />}
                                    ÏñëÎ≥ÄÍ∏∞
                                </label>
                            </div>
                        )}/>
                        <Controller name="squat" control={control} rules={{required: true}} render={({field: { onChange, value }}) => (
                            <div value={value} onChange={onChange}>
                                <input type="checkbox" id="squat"onChange={handleCheckbox}/>
                                <label htmlFor="squat">
                                    {toilet.find((v) => v === "squat") ? <CheckboxTrue /> : <CheckboxFalse />}
                                    Ï¢åÎ≥ÄÍ∏∞
                                </label>
                            </div>
                        )}/>
                        <Controller name="bidet" control={control} rules={{required: true}} render={({field: { onChange, value }}) => (
                            <div value={value} onChange={onChange}>
                                <input type="checkbox" id="bidet" onChange={handleCheckbox}/>
                                <label htmlFor="bidet">
                                    {toilet.find((v) => v === "bidet") ? <CheckboxTrue /> : <CheckboxFalse />}
                                    ÎπÑÎç∞
                                </label>
                            </div>
                        )}/>
                    </article>
                    {errors.seat && errors.squat && errors.bidet && <FormErrorMessage message="üö® Î≥ÄÍ∏∞ Ï¢ÖÎ•òÎ•º ÏÑ†ÌÉùÌï¥Ï£ºÏÑ∏Ïöî" />}

                    <p className={styles.subtitle}>Ìú¥ÏßÄ</p>
                    <Controller name="tissue" control={control} rules={{required: true}} render={({field: { onChange, value }}) => (
                        <article value={value} onChange={onChange}>
                            <input type="radio" name="tissue" id="yes" value="yes" onChange={(e) => setTissue(e.target.id)}/>
                            <label htmlFor="yes">
                                {tissue === "yes" ? <RadioTrue /> : <RadioFalse />}
                                ÏûàÏùå
                            </label>
                            <input type="radio" name="tissue" id="no" value="no" onChange={(e) => setTissue(e.target.id)}/>
                            <label htmlFor="no">
                                {tissue === "no" ? <RadioTrue /> : <RadioFalse />}
                                ÏóÜÏùå
                            </label>
                        </article>
                    )} />
                    {errors.tissue && <FormErrorMessage message="üö® Ìú¥ÏßÄ Ïó¨Î∂ÄÎ•º ÏÑ†ÌÉùÌï¥Ï£ºÏÑ∏Ïöî" />}

                    <p className={styles.subtitle}>Ïû•Ïï†Ïù∏ ÌôîÏû•Ïã§</p>
                    <Controller name="disabled" control={control} rules={{required: true}} render={({field: { onChange, value }}) => (
                        <article value={value} onChange={onChange}>
                            <input type="radio" name="disabled" id="provided" value="provided" onChange={(e) => setDisabled(e.target.id)}/>
                            <label htmlFor="provided">
                                {disabled === "provided" ? <RadioTrue /> : <RadioFalse />}
                                ÏûàÏùå
                            </label>
                            <input type="radio" name="disabled" id="unprovided" value="unprovided" onChange={(e) => setDisabled(e.target.id)}/>
                            <label htmlFor="unprovided">
                                {disabled === "unprovided" ? <RadioTrue /> : <RadioFalse />}
                                ÏóÜÏùå
                            </label>
                        </article>
                    )} />
                    {errors.disabled && <FormErrorMessage message="üö® Ïû•Ïï†Ïù∏ ÌôîÏû•Ïã§ Ïó¨Î∂ÄÎ•º ÏÑ†ÌÉùÌï¥Ï£ºÏÑ∏Ïöî" />}

                </section>

                <section className={styles.stars}>
                    <p className={styles.title}>Î≥ÑÏ†ê</p>
                    <Controller name="rate" control={control} rules={{required: true}} render={({field: { onChange, value }}) => (
                        <article value={value} onChange={onChange}>
                        {[1,2,3,4,5].map((v, i) =>
                            <>
                                <input type="radio" name="rate" id={v} value={v}/>
                                <label htmlFor={v}>
                                    <StarCustom key={v} width="32" height="30.56" fill={starStatus[i] ? "#589fd2" : "#d6d6d6"} className={styles.star} onClick={() => {
                                        let currStatus = [];
                                        for (let j=0; j<v; j++) { currStatus.push(1); }
                                        for (let j=0; j<v; j++) { currStatus.push(0); }
                                        setStarStatus(currStatus);
                                        setRate(v);
                                    }} />
                                </label>
                            </>
                        )}
                        </article>
                    )} />
                </section>
                {errors.rate && <FormErrorMessage message="üö® Î≥ÑÏ†êÏùÑ ÏûÖÎ†•Ìï¥Ï£ºÏÑ∏Ïöî" />}

                <section className={styles.review}>
                    <p className={styles.title}>Î¶¨Î∑∞</p>
                    <textarea {...register("textarea", {required: true})} className={styles.inputarea} placeholder="Î¶¨Î∑∞Î•º ÏûëÏÑ±Ìï¥Ï£ºÏÑ∏Ïöî."/>
                </section>
                {errors.textarea && <FormErrorMessage message="üö® Î¶¨Î∑∞Î•º ÏûÖÎ†•Ìï¥Ï£ºÏÑ∏Ïöî" />}

                <section className={styles.image}>
                    <input id="image" type="file" multiple accept="image/*" onChange={(e) => console.log(e)}/>
                    <article className={styles.inputarea}>
                        <span >ÌôîÏû•Ïã§ Ïù¥ÎØ∏ÏßÄ (ÏÑ†ÌÉù)</span>
                        <div><label htmlFor="image">ÏóÖÎ°úÎìú</label></div>
                    </article>
                </section>

                <section className={styles.button}>
                    <BlueBtn text="Î¶¨Î∑∞ Ï∂îÍ∞Ä" />
                </section>
            </form>
        </Layout>
    );
}

export default WriteReview;